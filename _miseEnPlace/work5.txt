## GraphQL subscriptions?
- afeature that allows a server to send data to its clients when a specific event happens.
- Subscriptions are usually implemented with WebSockets.
- In that setup, the server maintains a steady connection to its subscribed client.
- This also breaks the “Request-Response-Cycle” that were used for all previous interactions with the API.


## Setting up PubSub ##
-[] index.js
```
const { PubSub } = require('apollo-server')

const pubsub = new PubSub()
```
return {
      ...req,
      prisma,
      pubsub,
      userId:
        req && req.headers.authorization
          ? getUserId(req)
          : null
    };
-[] touch src/resolvers/Subscription.js
```
function newLinkSubscribe(parent, args, context, info) {
  return context.pubsub.asyncIterator("NEW_LINK")
}

const newLink = {
  subscribe: newLinkSubscribe,
  resolve: payload => {
    return payload
  },
}

module.exports = {
  newLink,
}

```
-[] mutation js update:
async function post(parent, args, context, info) {
  const { userId } = context;

  const newLink = await context.prisma.link.create({
    data: {
      url: args.url,
      description: args.description,
      postedBy: { connect: { id: userId } },
    }
  })
  context.pubsub.publish("NEW_LINK", newLink)

  return newLink
}


-[]
    npx prisma migrate dev --name "add-vote-model"

    -[]
        npx prisma generate
